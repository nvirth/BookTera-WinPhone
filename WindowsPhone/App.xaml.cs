using System;
using System.ComponentModel;
using System.Linq;
using System.Diagnostics;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Navigation;
using WindowsPhone.Annotations;
using WindowsPhone.Common.BackgroundAgent;
using WindowsPhone.Common;
using Coding4Fun.Toolkit.Controls;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Shell;
using WindowsPhone.Resources;
using WindowsPhone.ViewModels;
using Microsoft.WindowsAzure.MobileServices;
using Newtonsoft.Json;
using TileUpdaterAgent;
using WinPhoneClientProxy.WcfProxy;
using WinPhoneCommon.Models;
using GestureEventArgs = System.Windows.Input.GestureEventArgs;
using InBookBlockPVM = CommonPortable.Models.ProductModels.InBookBlockPVM;
using Microsoft.Phone.Notification;

namespace WindowsPhone
{
	// Generated by the project template
	public partial class App : Application
	{
		/// <summary>
		/// Provides easy access to the root frame of the Phone Application.
		/// </summary>
		/// <returns>The root frame of the Phone Application.</returns>
		public static PhoneApplicationFrame RootFrame { get; private set; }

		/// <summary>
		/// Constructor for the Application object.
		/// </summary>
		public App()
		{
			// Global handler for uncaught exceptions.
			UnhandledException += Application_UnhandledException;

			// Standard XAML initialization
			InitializeComponent();

			// Phone-specific initialization
			InitializePhoneApplication();

			// Language display initialization
			InitializeLanguage();

			// -- My Section
			InitMySection();

			// Show graphics profiling information while debugging.
			if(Debugger.IsAttached)
			{
				// Display the current frame rate counters.
				Application.Current.Host.Settings.EnableFrameRateCounter = true;

				// Show the areas of the app that are being redrawn in each frame.
				//Application.Current.Host.Settings.EnableRedrawRegions = true;

				// Enable non-production analysis visualization mode,
				// which shows areas of a page that are handed off to GPU with a colored overlay.
				//Application.Current.Host.Settings.EnableCacheVisualization = true;

				// Prevent the screen from turning off while under the debugger by disabling
				// the application's idle detection.
				// Caution:- Use this under debug mode only. Application that disables user idle detection will continue to run
				// and consume battery power when the user is not using the phone.
				PhoneApplicationService.Current.UserIdleDetectionMode = IdleDetectionMode.Disabled;
			}

		}

		// Code to execute when the application is launching (eg, from Start)
		// This code will not execute when the application is reactivated
		private void Application_Launching(object sender, LaunchingEventArgs e)
		{
		}

		// Code to execute when the application is activated (brought to foreground)
		// This code will not execute when the application is first launched
		private void Application_Activated(object sender, ActivatedEventArgs e)
		{
		}

		// Code to execute when the application is deactivated (sent to background)
		// This code will not execute when the application is closing
		private void Application_Deactivated(object sender, DeactivatedEventArgs e)
		{
			// Ensure that required application state is persisted here.
		}

		// Code to execute when the application is closing (eg, user hit Back)
		// This code will not execute when the application is deactivated
		private void Application_Closing(object sender, ClosingEventArgs e)
		{
		}

		// Code to execute if a navigation fails
		private void RootFrame_NavigationFailed(object sender, NavigationFailedEventArgs e)
		{
			if(Debugger.IsAttached)
			{
				// A navigation has failed; break into the debugger
				Debugger.Break();
			}
		}

		// Code to execute on Unhandled Exceptions
		private void Application_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)
		{
			if(Debugger.IsAttached)
			{
				// An unhandled exception has occurred; break into the debugger
				Debugger.Break();
			}
		}

		#region Phone application initialization

		// Avoid double-initialization
		private bool phoneApplicationInitialized = false;

		// Do not add any additional code to this method
		private void InitializePhoneApplication()
		{
			if(phoneApplicationInitialized)
				return;

			// Create the frame but don't set it as RootVisual yet; this allows the splash
			// screen to remain active until the application is ready to render.
			RootFrame = new PhoneApplicationFrame();
			RootFrame.Navigated += CompleteInitializePhoneApplication;

			// Handle navigation failures
			RootFrame.NavigationFailed += RootFrame_NavigationFailed;

			// Handle reset requests for clearing the backstack
			RootFrame.Navigated += CheckForResetNavigation;

			// Ensure we don't initialize again
			phoneApplicationInitialized = true;
		}

		// Do not add any additional code to this method
		private void CompleteInitializePhoneApplication(object sender, NavigationEventArgs e)
		{
			// Set the root visual to allow the application to render
			if(RootVisual != RootFrame)
				RootVisual = RootFrame;

			// Remove this handler since it is no longer needed
			RootFrame.Navigated -= CompleteInitializePhoneApplication;
		}

		private void CheckForResetNavigation(object sender, NavigationEventArgs e)
		{
			// If the app has received a 'reset' navigation, then we need to check
			// on the next navigation to see if the page stack should be reset
			if(e.NavigationMode == NavigationMode.Reset)
				RootFrame.Navigated += ClearBackStackAfterReset;
		}

		private void ClearBackStackAfterReset(object sender, NavigationEventArgs e)
		{
			// Unregister the event so it doesn't get called again
			RootFrame.Navigated -= ClearBackStackAfterReset;

			// Only clear the stack for 'new' (forward) and 'refresh' navigations
			if(e.NavigationMode != NavigationMode.New && e.NavigationMode != NavigationMode.Refresh)
				return;

			// For UI consistency, clear the entire page stack
			while(RootFrame.RemoveBackEntry() != null)
			{
				; // do nothing
			}
		}

		#endregion

		// Initialize the app's font and flow direction as defined in its localized resource strings.
		//
		// To ensure that the font of your application is aligned with its supported languages and that the
		// FlowDirection for each of those languages follows its traditional direction, ResourceLanguage
		// and ResourceFlowDirection should be initialized in each resx file to match these values with that
		// file's culture. For example:
		//
		// AppResources.es-ES.resx
		//    ResourceLanguage's value should be "es-ES"
		//    ResourceFlowDirection's value should be "LeftToRight"
		//
		// AppResources.ar-SA.resx
		//     ResourceLanguage's value should be "ar-SA"
		//     ResourceFlowDirection's value should be "RightToLeft"
		//
		// For more info on localizing Windows Phone apps see http://go.microsoft.com/fwlink/?LinkId=262072.
		//
		private void InitializeLanguage()
		{
			try
			{
				// Set the font to match the display language defined by the
				// ResourceLanguage resource string for each supported language.
				//
				// Fall back to the font of the neutral language if the Display
				// language of the phone is not supported.
				//
				// If a compiler error is hit then ResourceLanguage is missing from
				// the resource file.
				RootFrame.Language = XmlLanguage.GetLanguage(AppResources.ResourceLanguage);

				// Set the FlowDirection of all elements under the root frame based
				// on the ResourceFlowDirection resource string for each
				// supported language.
				//
				// If a compiler error is hit then ResourceFlowDirection is missing from
				// the resource file.
				FlowDirection flow = (FlowDirection)Enum.Parse(typeof(FlowDirection), AppResources.ResourceFlowDirection);
				RootFrame.FlowDirection = flow;
			}
			catch
			{
				// If an exception is caught here it is most likely due to either
				// ResourceLangauge not being correctly set to a supported language
				// code or ResourceFlowDirection is set to a value other than LeftToRight
				// or RightToLeft.

				if(Debugger.IsAttached)
				{
					Debugger.Break();
				}

				throw;
			}
		}

	}

	// My section
	public partial class App : INotifyPropertyChanged
	{
		public ApplicationBar ApplicationBar;

		#region Init

		private void InitializeAppBar()
		{
			ApplicationBar = (ApplicationBar)Resources["AppBar"];
			AppBarMenu.Init(ApplicationBar);
		}
		private void InitializeTheme()
		{
			var isDark = (Visibility)Current.Resources["PhoneDarkThemeVisibility"] == Visibility.Visible;
			if(!isDark)
				StaticData.ThemeSwitchData.SetLightTheme();
		}

		private void InitMySection()
		{
			InitializeAppBar();
			InitializeTheme();
			//HelpersShared.SetDefaultCultureToHungarian();

			// Additional initializaion in BookteraMainPage
		}

		#endregion

		#region INotifyPropertyChanged

		public event PropertyChangedEventHandler PropertyChanged;

		[NotifyPropertyChangedInvocator]
		protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if(handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
		}

		#endregion

		#region ContextMenu

		private void BookBlock_Tap(object sender, GestureEventArgs e)
		{
			OpenContextMenu(sender);
		}

		public static void OpenContextMenu(object sender)
		{
			var contextMenu = ContextMenuService.GetContextMenu(sender as DependencyObject);
			contextMenu.IsOpen = true;
		}

		/// <summary>
		/// Without this, the ContextMenu will have (randomly) wrong DataContext... (Silverlight bug)
		/// </summary>
		private void ContextMenu_Unloaded(object sender, RoutedEventArgs e)
		{
			var contextMenu = (ContextMenu)sender;
			contextMenu.ClearValue(FrameworkElement.DataContextProperty);
		}

		public void ContextMenu_OnOpened(object sender, RoutedEventArgs e)
		{
			ContextMenu_OnOpened_DoWork(sender, e);
		}
		public static void ContextMenu_OnOpened_DoWork(object sender, RoutedEventArgs e)
		{
			AppBarMenu.ApplicationBar.Mode = ApplicationBarMode.Minimized;

			// I could not bind 3 bool's and-value to the CartMenuItem.Visibility property in
			// this platform (there's no MultiBinding... I tried it many ways...)
			// So I have to manually handle it
			foreach(var item in ((ContextMenu)sender).Items.OfType<ComplexMenuItem>())
				item.ApplyComplexVisibility();
		}

		public void ContextMenu_OnClosed(object sender, RoutedEventArgs e)
		{
			ContextMenu_OnClosed_DoWork(sender, e);
		}

		public static void ContextMenu_OnClosed_DoWork(object sender, RoutedEventArgs e)
		{
			AppBarMenu.ApplicationBar.Mode = ApplicationBarMode.Default;
		}

		private void ContextMenu_UsersProducts_Click(object sender, RoutedEventArgs e)
		{
			var dataContext = ((MenuItem)sender).DataContext;
			ContextMenu_UsersProducts_Click_DoWork(dataContext);
		}

		public static void ContextMenu_UsersProducts_Click_DoWork(object dataContext)
		{
			var pvm = GetDataFrom_InBookBlockPVM(dataContext);

			var uri = new Uri(string.Format("/SearchPage.xaml?userFu={0}&userName={1}",
				pvm.Product.UserFriendlyUrl, pvm.Product.UserName), UriKind.Relative);

			var frame = (PhoneApplicationFrame)Current.RootVisual;
			frame.Navigate(uri);
		}

		private void ContextMenu_ProductGroup_Click(object sender, RoutedEventArgs e)
		{
			var dataContext = ((MenuItem)sender).DataContext;
			var pvm = GetDataFrom_InBookBlockPVM(dataContext);

			var uri = new Uri(string.Format("/ProductGroupDetailsPage.xaml?friendlyUrl={0}",
				pvm.ProductGroup.FriendlyUrl), UriKind.Relative);

			var frame = (PhoneApplicationFrame)Current.RootVisual;
			frame.Navigate(uri);
		}

		private void ContextMenu_AddToCart_Click(object sender, RoutedEventArgs e)
		{
			var dataContext = ((MenuItem)sender).DataContext;
			var pvm = GetDataFrom_InBookBlockPVM(dataContext);

			Action todoAfterResponseReceived = () => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					new ToastPrompt()
					{
						Message = "Könyv a kosárban!",
					}.Show();

					DecrementQuantity(dataContext);
				});

			Action<WebException> todoWithWebException = webException => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					if(pvm.Product.IsDownloadable)
						MessageBox.Show("Elektronikus könyvből csak 1db-ot rendelhetsz. ");
					else
						MessageBox.Show("Sajnos nem sikerült kosárba tenned a könyvet. Valószínűleg valaki időközben elvitte előled.");
				});

			Services.TransactionManagerClient.AddProductToCart(pvm.Product.ID, todoAfterResponseReceived, todoWithWebException);
		}

		private static CommonPortable.Models.ProductModels.InBookBlockPVM GetDataFrom_InBookBlockPVM(object dataContext)
		{
			var vm = dataContext as CommonPortable.Models.ProductModels.InBookBlockPVM;
			if(vm != null)
				return vm;

			var vm1 = dataContext as WinPhoneClientProxy.ProductGroupManagerService.InBookBlockPVM;
			var vm2 = dataContext as WinPhoneClientProxy.CategoryManagerService.InBookBlockPVM;
			var vm3 = dataContext as WinPhoneClientProxy.ProductManagerService.InBookBlockPVM;

			#region vm1

			if(vm1 != null)
			{
				return new InBookBlockPVM()
				{
					Product = new InBookBlockPVM.ProductVM()
					{
						ID = vm1.Product.ID,
						ImageUrl = vm1.Product.ImageUrl,
						PriceString = vm1.Product.PriceString,
						HowMany = vm1.Product.HowMany,
						UserName = vm1.Product.UserName,
						UserFriendlyUrl = vm1.Product.UserFriendlyUrl,
						Description = vm1.Product.Description,
						IsDownloadable = vm1.Product.IsDownloadable,
						ProductInOrderId = vm1.Product.ProductInOrderId,
					},
					ProductGroup = new InBookBlockPVM.ProductGroupVM()
					{
						Title = vm1.ProductGroup.Title,
						SubTitle = vm1.ProductGroup.SubTitle,
						FriendlyUrl = vm1.ProductGroup.FriendlyUrl,
						ImageUrl = vm1.ProductGroup.ImageUrl,
						SumOfRatings = vm1.ProductGroup.SumOfRatings,
						RatingPoints = vm1.ProductGroup.RatingPoints,
						AuthorNames = vm1.ProductGroup.AuthorNames,
						PublisherName = vm1.ProductGroup.PublisherName,
						Description = vm1.ProductGroup.Description,
						IsCheckedByAdmin = vm1.ProductGroup.IsCheckedByAdmin,
						CategoryFullPath = vm1.ProductGroup.CategoryFullPath,
						CategoryFriendlyUrl = vm1.ProductGroup.CategoryFriendlyUrl,
					},
				};
			}

			#endregion

			#region vm2

			if(vm2 != null)
			{
				return new InBookBlockPVM()
				{
					Product = new InBookBlockPVM.ProductVM()
					{
						ID = vm2.Product.ID,
						ImageUrl = vm2.Product.ImageUrl,
						PriceString = vm2.Product.PriceString,
						HowMany = vm2.Product.HowMany,
						UserName = vm2.Product.UserName,
						UserFriendlyUrl = vm2.Product.UserFriendlyUrl,
						Description = vm2.Product.Description,
						IsDownloadable = vm2.Product.IsDownloadable,
						ProductInOrderId = vm2.Product.ProductInOrderId,
					},
					ProductGroup = new InBookBlockPVM.ProductGroupVM()
					{
						Title = vm2.ProductGroup.Title,
						SubTitle = vm2.ProductGroup.SubTitle,
						FriendlyUrl = vm2.ProductGroup.FriendlyUrl,
						ImageUrl = vm2.ProductGroup.ImageUrl,
						SumOfRatings = vm2.ProductGroup.SumOfRatings,
						RatingPoints = vm2.ProductGroup.RatingPoints,
						AuthorNames = vm2.ProductGroup.AuthorNames,
						PublisherName = vm2.ProductGroup.PublisherName,
						Description = vm2.ProductGroup.Description,
						IsCheckedByAdmin = vm2.ProductGroup.IsCheckedByAdmin,
						CategoryFullPath = vm2.ProductGroup.CategoryFullPath,
						CategoryFriendlyUrl = vm2.ProductGroup.CategoryFriendlyUrl,
					},
				};
			}

			#endregion

			#region vm3

			if(vm3 != null)
			{
				return new InBookBlockPVM()
				{
					Product = new InBookBlockPVM.ProductVM()
					{
						ID = vm3.Product.ID,
						ImageUrl = vm3.Product.ImageUrl,
						PriceString = vm3.Product.PriceString,
						HowMany = vm3.Product.HowMany,
						UserName = vm3.Product.UserName,
						UserFriendlyUrl = vm3.Product.UserFriendlyUrl,
						Description = vm3.Product.Description,
						IsDownloadable = vm3.Product.IsDownloadable,
						ProductInOrderId = vm3.Product.ProductInOrderId,
					},
					ProductGroup = new InBookBlockPVM.ProductGroupVM()
					{
						Title = vm3.ProductGroup.Title,
						SubTitle = vm3.ProductGroup.SubTitle,
						FriendlyUrl = vm3.ProductGroup.FriendlyUrl,
						ImageUrl = vm3.ProductGroup.ImageUrl,
						SumOfRatings = vm3.ProductGroup.SumOfRatings,
						RatingPoints = vm3.ProductGroup.RatingPoints,
						AuthorNames = vm3.ProductGroup.AuthorNames,
						PublisherName = vm3.ProductGroup.PublisherName,
						Description = vm3.ProductGroup.Description,
						IsCheckedByAdmin = vm3.ProductGroup.IsCheckedByAdmin,
						CategoryFullPath = vm3.ProductGroup.CategoryFullPath,
						CategoryFriendlyUrl = vm3.ProductGroup.CategoryFriendlyUrl,
					},
				};
			}

			#endregion

			throw new Exception(); //else
		}

		private static void DecrementQuantity(object dataContext)
		{
			var vm1 = dataContext as WinPhoneClientProxy.ProductGroupManagerService.InBookBlockPVM;
			var vm2 = dataContext as WinPhoneClientProxy.CategoryManagerService.InBookBlockPVM;
			var vm3 = dataContext as WinPhoneClientProxy.ProductManagerService.InBookBlockPVM;

			if(vm1 != null)
			{
				if(!vm1.Product.IsDownloadable)	// Electronic product's qunatity is always 1
					vm1.Product.HowMany--;
			}
			else if(vm2 != null)
			{
				if(!vm2.Product.IsDownloadable)	// Electronic product's qunatity is always 1
					vm2.Product.HowMany--;
			}
			else if(vm3 != null)
			{
				if(!vm3.Product.IsDownloadable)	// Electronic product's qunatity is always 1
					vm3.Product.HowMany--;
			}
			else
				throw new Exception();
		}

		private void ContextMenu_RemoveFromCart_Click(object sender, RoutedEventArgs e)
		{
			var bookBlock = ((InBookBlockPvmByTransaction)((ComplexMenuItem)sender).DataContext);

			var msg = string.Format("Biztos, hogy ki szeretnéd venni ezt a könyvet a kosaradból? ({0})", bookBlock.ProductGroup.Title);
			var messageBoxResult = MessageBox.Show(msg, "Törlés megerősítése", MessageBoxButton.OKCancel);
			if(messageBoxResult == MessageBoxResult.Cancel)
				return;

			RemoveFromCart_DoWork(bookBlock);
		}

		private void RemoveFromCart_DoWork(InBookBlockPvmByTransaction bookBlock)
		{
			Action todoAfterResponseReceived = () => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					new ToastPrompt()
					{
						Message = "Könyv kivéve a kosárból!"
					}.Show();
					bookBlock.OnRemovedFromCart();
				});
			Action<WebException> todoWithWebException = webException => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					MessageBox.Show("Nem sikerült kivenni a könyvet a kosaradból.");
					bool noUnderline;
				});

			Services.TransactionManagerClient.RemoveProductFromCart(
				bookBlock.Product.ProductInOrderId, todoAfterResponseReceived, todoWithWebException);
		}

		private void ContextMenu_ChangeProductQuantity_Click(object sender, RoutedEventArgs e)
		{
			var bookBlock = ((InBookBlockPvmByTransaction)((ComplexMenuItem)sender).DataContext);

			ChangeProductQuantity_DoWork(bookBlock);
		}

		private void ChangeProductQuantity_DoWork(InBookBlockPvmByTransaction bookBlock, string errorMessage = "")
		{
			EventHandler<PopUpEventArgs<string, PopUpResult>> inputOnCompleted =
				(sender, args) =>
				{
					int newQuantity;
					if(!int.TryParse(args.Result, out newQuantity))
					{
						ChangeProductQuantity_DoWork(bookBlock, "Érvénytelen számformutám.\r\n");
						return;
					}
					if(newQuantity < 0)
					{
						ChangeProductQuantity_DoWork(bookBlock, "Nem kérhetsz negatív számú könyvet.\r\n");
						return;
					}
					if(newQuantity == 0)
					{
						RemoveFromCart_DoWork(bookBlock);
						return;
					}
					if(newQuantity == bookBlock.Product.HowMany) // no changing is needed
					{
						new ToastPrompt() { Message = "A mennyiség nem változott!" }.Show();
						return;
					}
					if(bookBlock.Product.IsDownloadable) //newQuantity==0 already handled
					{
						new ToastPrompt() { Message = "Elektronikus könyvből csak 1db-ot kérhetsz. " }.Show();
						return;
					}

					Action todoAfterResponseReceived = () => Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							new ToastPrompt() { Message = "Mennyiség módosítva!" }.Show();
							bookBlock.RefreshQuantity(newQuantity);
						});
					Action<WebException> todoWithWebException = webException => Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							MessageBox.Show("Nem sikerült módosítani a mennyiséget. Valószínűleg nincs elég könyve az eladónak.");
							bool noUnderline;
						});

					Services.TransactionManagerClient.UpdateProductInCart(
						bookBlock.Product.ProductInOrderId, newQuantity, todoAfterResponseReceived, todoWithWebException);
				};

			var input = new InputPrompt
			{
				Title = "Mennyiség módosítása",
				Message = string.Format("{0} A(z) \"{1}\" könyvből ennyit kérek:", errorMessage, bookBlock.ProductGroup.Title),
				InputScope = new InputScope { Names = { new InputScopeName() { NameValue = InputScopeNameValue.Number } } },
			};

			input.Completed += inputOnCompleted;
			input.Show();
		}

		private void ContextMenu_ChangeExchangeProductQuantity_Click(object sender, RoutedEventArgs e)
		{
			var bookBlock = ((InBookBlockPvmByTransaction)((ComplexMenuItem)sender).DataContext);
			ChangeExchangeProductQuantity_DoWork(bookBlock);
		}

		private void ChangeExchangeProductQuantity_DoWork(InBookBlockPvmByTransaction bookBlock, string errorMessage = "")
		{
			EventHandler<PopUpEventArgs<string, PopUpResult>> inputOnCompleted =
				(sender, args) =>
				{
					int newQuantity;
					if(!int.TryParse(args.Result, out newQuantity))
					{
						ChangeExchangeProductQuantity_DoWork(bookBlock, "Érvénytelen számformutám.\r\n");
						return;
					}
					if(newQuantity < 0)
					{
						ChangeExchangeProductQuantity_DoWork(bookBlock, "Nem kérhetsz negatív számú könyvet.\r\n");
						return;
					}
					if(newQuantity == 0)
					{
						RemoveFromExchangeCart_DoWork(bookBlock);
						return;
					}
					if(newQuantity == bookBlock.Product.HowMany) // no changing is needed
					{
						new ToastPrompt() { Message = "A mennyiség nem változott!" }.Show();
						return;
					}
					if(bookBlock.Product.IsDownloadable) //newQuantity==0 already handled
					{
						new ToastPrompt() { Message = "Elektronikus könyvből csak 1db-ot kérhetsz. " }.Show();
						return;
					}

					Action todoAfterResponseReceived = () => Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							new ToastPrompt() { Message = "Mennyiség módosítva!" }.Show();
							bookBlock.RefreshQuantity(newQuantity, refreshSummary: false);
						});
					Action<WebException> todoWithWebException = webException => Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							MessageBox.Show("Nem sikerült módosítani a mennyiséget. Valószínűleg nincs elég könyve az eladónak.");
							bool noUnderline;
						});

					Services.TransactionManagerClient.UpdateExchangeProduct(
						bookBlock.Product.ProductInOrderId, newQuantity, todoAfterResponseReceived, todoWithWebException);
				};

			var input = new InputPrompt
			{
				Title = "Mennyiség módosítása",
				Message = string.Format("{0} A(z) \"{1}\" könyvből ennyit kérek:", errorMessage, bookBlock.ProductGroup.Title),
				InputScope = new InputScope { Names = { new InputScopeName() { NameValue = InputScopeNameValue.Number } } },
			};

			input.Completed += inputOnCompleted;
			input.Show();
		}

		private void ContextMenu_RemoveFromExchangeCart_Click(object sender, RoutedEventArgs e)
		{
			var bookBlock = ((InBookBlockPvmByTransaction)((ComplexMenuItem)sender).DataContext);

			var msg = string.Format("Biztos, hogy ki szeretnéd venni ezt a könyvet a csere-kosaradból? ({0})", bookBlock.ProductGroup.Title);
			var messageBoxResult = MessageBox.Show(msg, "Törlés megerősítése", MessageBoxButton.OKCancel);
			if(messageBoxResult == MessageBoxResult.Cancel)
				return;

			RemoveFromExchangeCart_DoWork(bookBlock);
		}

		private void RemoveFromExchangeCart_DoWork(InBookBlockPvmByTransaction bookBlock)
		{
			Action todoAfterResponseReceived = () => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					new ToastPrompt() { Message = "Könyv kivéve a csere-kosárból!" }.Show();
					bookBlock.OnRemovedFromCart(); // from ExchangeCart
				});
			Action<WebException> todoWithWebException = webException => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					MessageBox.Show("Nem sikerült kivenni a könyvet a csere-kosaradból.");
					bool noUnderline;
				});

			Services.TransactionManagerClient.RemoveExchangeProduct(
				bookBlock.Product.ProductInOrderId, todoAfterResponseReceived, todoWithWebException);
		}

		private void ContextMenu_AddToExchangeCart_Click(object sender, RoutedEventArgs e)
		{
			var dataContext = ((MenuItem)sender).DataContext;
			var pvm = GetDataFrom_InBookBlockPVM(dataContext);
			var userOrderId = SearchPage.ExchangeCartUserOrderId;

			Action todoAfterResponseReceived = () => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					new ToastPrompt()
					{
						Message = "Könyv a csere-kosárban!",
					}.Show();

					DecrementQuantity(dataContext);
				});

			Action<WebException> todoWithWebException = webException => Deployment.Current.Dispatcher.BeginInvoke(
				() =>
				{
					if(pvm.Product.IsDownloadable)
						MessageBox.Show("Elektronikus könyvből csak 1db-ot kérhetsz. ");
					else
						MessageBox.Show("Sajnos nem sikerült csere-kosárba tenned a könyvet. Valószínűleg valaki időközben elvitte előled.");
				});

			Services.TransactionManagerClient.AddExchangeProduct(pvm.Product.ID, userOrderId, todoAfterResponseReceived, todoWithWebException);
		}

		#endregion
	}
}